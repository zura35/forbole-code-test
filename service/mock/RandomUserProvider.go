// Code generated by mockery v2.32.2. DO NOT EDIT.

package mock

import (
	service "forbole_code_test/service"

	mock "github.com/stretchr/testify/mock"
)

// RandomUserProvider is an autogenerated mock type for the RandomUserProvider type
type RandomUserProvider struct {
	mock.Mock
}

type RandomUserProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *RandomUserProvider) EXPECT() *RandomUserProvider_Expecter {
	return &RandomUserProvider_Expecter{mock: &_m.Mock}
}

// GetRandomUser provides a mock function with given fields:
func (_m *RandomUserProvider) GetRandomUser() (*service.User, error) {
	ret := _m.Called()

	var r0 *service.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (*service.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *service.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*service.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RandomUserProvider_GetRandomUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRandomUser'
type RandomUserProvider_GetRandomUser_Call struct {
	*mock.Call
}

// GetRandomUser is a helper method to define mock.On call
func (_e *RandomUserProvider_Expecter) GetRandomUser() *RandomUserProvider_GetRandomUser_Call {
	return &RandomUserProvider_GetRandomUser_Call{Call: _e.mock.On("GetRandomUser")}
}

func (_c *RandomUserProvider_GetRandomUser_Call) Run(run func()) *RandomUserProvider_GetRandomUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RandomUserProvider_GetRandomUser_Call) Return(_a0 *service.User, _a1 error) *RandomUserProvider_GetRandomUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RandomUserProvider_GetRandomUser_Call) RunAndReturn(run func() (*service.User, error)) *RandomUserProvider_GetRandomUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewRandomUserProvider creates a new instance of RandomUserProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRandomUserProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *RandomUserProvider {
	mock := &RandomUserProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
